parseInt()能去除px单位

Z-index 是直接改变的 不会慢慢来

可以在封装好的函数里面加入一个回调函数
然后就可以函数里面套函数 实现链式运动

一个物体上只有一个定时器
不然绝对出bug

当需要在同一个元素上设置多个属性的时候
设立一个flag值  在定时器开头设置var flag = 1
然后每个循环里面都设置一个flag = 0
最后再放一个if(flag) 里面放clearInterval()

高级轮播图可以通过 储存在数组里的样式
更换样式进行轮播的效果

在构造函数里面添加点击事件 需要var that = this
然后再在点击事件里面用that

碰撞改变方向可以用速度*-1来解决

实现重力效果 可以每次减少速度来实现，
然后再if一个触底反弹
speed*=-0.8

加速运动 减速运动 speed变量要放在计时器外面
以便于改变

设置圆周运动需要确定几个点 然后确认圆心和半径
利用角度变化进行X轴和Y轴的变化实现

圆周运动需要先确认半径、初始角度、还有圆心坐标
放在计时器的外面

椭圆运动公式：
left = 圆心x + 长轴*cos - 自身宽度的一半
top = 圆心y + 短轴*sin - 自身高度的一半

es6新语法:
every:检测数组元素的每一个元素是否都符合条件）
some:检测数组子元素是否有符合条件的，然后结束
reduce：有两个参数 
	arr.reduce(function(prev,current){
		console.log(prev)
		console.log(current)
		return prev*2
},2)
prev是上一次函数的返回值 最后的那个2是0位上的
prev

map类型类似对象
key值不单单可以是字符串形式
可以是任意形式
设置键值对要用set
防止键值对需要用到get

for of只能遍历数组还有Map类型

扩展选择器：
var li = document.querySelectorAll("ul .one");//选中的是一个集合
返回值是nodeli属性 类似数组 可以用for of
括号里面是CSS选中规则

如果只要一个可以用 document.querySelector("li");

只有表单才有提交事件form
onsubmit

事件委托不能选中某个子元素可以用for循环在每一个
子元素身上加一个index

轮播图的思想 在全局单独设置一个index=0
而且将其他图片放在框外移动进来

用document.createElement创建的元素可以
通过父元素的innerHTML来移出 这样就不会冲突了
如果用remove()会发生bug  remove()会优先执行

面向对象的形参处理方法：
1、传入的形参进行this处理
function(a,b){
	this.a = a;
}
2、直接选中类名
function(a,b){
	this.a = document.getElementById(a);
}

对象有两种创建方法：
1、var obj = {}   plainObject 对象字面量
2、构造函数: (1)系统自带的(2)自定义
var obj = {}
var obj = new Object();
本质上这两种创建方法是一样的
new Object() 相当于一个独一无二的工厂生产出来的

构造函数和函数的区别：
1、构造函数里面创建属性需要加上this.xxx
如果使用var 是访问不到的 
添加动态的函数也是需要this.xxx = function(){}
2、构造函数是实例化对象的 前一步 
需要 var obj = new Obj(); 进行实例化才能拿到
构造函数里面创建的对象
优点是节约了内存 不进行实例化的时候是不占内存的
3、构造函数中的默认返回this

构造函数在new了之后有三个隐式变化：
1、在函数最顶端隐式生成一个this:{}对象
2、然后将所有this.xxx返回到this对象
3、最后再偷偷的把this返回

如果直接字面量一个对象会很死板，但是构造函数
相当于工厂，能批量生产出对象，而且构造函数可以
传参，this.name = name;这就确保了批量生产的同时
每个对象的一些属性值不一样，非常灵活

构造函数中的函数里面使用构造函数里面的属性也要
用this.xxx

而且像系统自带的构造函数也能够进行实例化
例如var num = new Number();
然后num.a = "123"  
敲出来是可以访问的 num.a   ==> "123"

在五个基础数据类型中
var num = new Number(21)
var num = new String("23")
var num = new Boolean(true)
这三个是能够实例化的 undefinde和null是无法实例化的

在原始值没用使用new方法的时候自定义属性
var num = 123;
num.abc = 234;   ===>   是不会报错的
		        而是会启动包装类
包装类指的是 系统会帮你创建一个new Number
然后创建成功后再delete掉

原始值是没有属性和方法的，但是字符串可以有
length属性，

执行器上下文，在函数被创建的时候会直接继承
上一级的执行期上下文 AO GO 
然后如果函数执行就会自己创建一个AO在执行期上下文
的最顶端也就是AO AO GO 然后依次向下执行
新创建的函数从上级继承的AO GO 执行期上下文
只是拿到它的引用，并不是复制并重新创造一个
执行期上下文

[[scope]]每一个javascript函数都是一个对象，
对象中有些属性我们可以访问，这些仅供javascript
引擎存储，[[scope]]就是其中之一
[[scope]]指的就是我们所说的作用域，其中存储了
执行期上下文的集合(也就是作用域链)

也就是说[[scope]]就是每个函数的作用域链
作用域链里包含着所有执行期上下文的集合

当函数执行完毕之后最后一步会销毁自己的执行期
上下文，如果里面包含其他函数，那么其他函数也就
不复存在了

闭包的产生就是当两个函数成嵌套关系的时候
父级函数在最后一步讲子级函数返回了，并将
子级函数保存到外面并储存起来,那么子级函数
的整个作用域链就被保存下来了

function a (){   function b(){}; return b}
var num = a();
b函数被保存到了num里面，并且作用域链也被
保存下来了
而且闭包里面的变量在全局是无法访问的

闭包的作用：
1、不使用外部变量，实现函数累加器功能
function add(){
	var num = 0;
	function a(){
		console.log(++num);
	}
	return a;
}
var myAdd = add();
myAdd();
myAdd();

立即执行函数,此类函数没有声明，在一次执行过后
即释放，就算有起名字也找不到这个函数
，适合做初始化工作

(function () {}())
立刻执行函数也可以传参数 实参和形参都在相应位置

立刻执行函数也是可以有return功能的，当return
回来之后可以用于存储
var num = (function(){ return 23 }())

注意：只有表达式才能被执行 执行符号是()
连123也算表达式
例如 function test(){} 这个是函数声明
但是 test();  这个也算表达式 所以能够执行
但是 function test(){}() 就不能被执行
所以可以在用 + - * / （）来让函数变成表达式
例如 +function test(){}() 这样就能执行了
立刻执行函数就是这样衍生而来

能被执行符号执行的表达式，函数名字就会被忽略
也就是说被执行符号执行的表达式无法再次被找到

原型prototype在函数function 被创建的时候就已经被定义好了
是系统自带的,原型也是一个对象

原型是function对象的一个属性，它定义了构造函数
制造出的对象的共同祖先。通过该构造函数构造出来的
对象，可以继承该原型的属性和方法

如果自己身上有这个属性，原型上也有这个属性
优先取自己身上的属性

为什么说function函数也是对象，
function是function类的实例，
声明function等同于创建一个function对象
虽然function也是一个对象，但是为了区分
function对象和其他的Object类型的对象，
所以function对象不是一个Object类型的对象，
而是属于object对象的父级对象
var fn = new Function("a","b","return a +b")
前面的参数全是新创建的函数的形参，
只有最后一个参数是函数的实体

所有字面量创建的对象都具有同一个原型对象
，并可以通过Object.prototype获取对原型对象
的引用

原型的应用，因为是构造函数定义之前的空对象
并可以访问属性和方法，所以一般用于提取构造
函数中共有的部分
因为被这个构造函数所实例化的对象能够访问